;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_bank_spr
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.import		_gray_line
	.import		_zap_shoot
	.import		_zap_read
	.export		_frames_to_wait
	.export		_pad1_zapper
	.export		_zap1_ready
	.export		_zap1_hit_detected
	.export		_trigger1_pulled
	.export		_shot_location
	.export		_zap1_light_read_pattern
	.export		_pad1
	.export		_pad1_new
	.export		_game_mode
	.export		_address
	.export		_x
	.export		_y
	.export		_index
	.export		_c_map
	.export		_read_input_triggers
	.export		_read_zapper_hits
	.export		_draw_sprites
	.export		_draw_bg
	.export		_level
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatiles
	.export		_WhiteBox
	.export		_main

.segment	"DATA"

_frames_to_wait:
	.byte	$05
_index:
	.byte	$00

.segment	"RODATA"

_level:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_bg:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$07
	.byte	$17
	.byte	$27
	.byte	$0F
	.byte	$02
	.byte	$12
	.byte	$22
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_palette_sp:
	.byte	$0F
	.byte	$07
	.byte	$28
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_metatiles:
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$09
	.byte	$02
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$00
_WhiteBox:
	.byte	$00
	.byte	$00
	.byte	$CB
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$CB
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$DA
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$DA
	.byte	$43
	.byte	$80

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1_zapper:
	.res	1,$00
_zap1_ready:
	.res	1,$00
_zap1_hit_detected:
	.res	1,$00
_trigger1_pulled:
	.res	1,$00
_shot_location:
	.res	1,$00
_zap1_light_read_pattern:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_game_mode:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00

; ---------------------------------------------------------------
; void __near__ read_input_triggers (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_input_triggers: near

.segment	"CODE"

;
; zap1_hit_detected = 0;
;
	lda     #$00
	sta     _zap1_hit_detected
;
; trigger1_pulled = 0;
;
	sta     _trigger1_pulled
;
; zap1_ready = pad1_zapper ^ 1; // XOR last frame, make sure not held down still
;
	lda     _pad1_zapper
	eor     #$01
	sta     _zap1_ready
;
; pad1_zapper = zap_shoot(0); // controller slot 1
;
	lda     #$00
	jsr     _zap_shoot
	sta     _pad1_zapper
;
; if ((pad1_zapper == 1) && (zap1_ready))
;
	cmp     #$01
	bne     L01B1
	lda     _zap1_ready
	bne     L01B2
L01B1:	rts
;
; trigger1_pulled = 1;
;
L01B2:	lda     #$01
	sta     _trigger1_pulled
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ read_zapper_hits (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_read_zapper_hits: near

.segment	"CODE"

;
; if (trigger1_pulled == 1)
;
	lda     _trigger1_pulled
	cmp     #$01
	bne     L017E
;
; zap1_hit_detected = zap_read(0); // look for light in zapper, port 1
;
	lda     #$00
	jsr     _zap_read
	sta     _zap1_hit_detected
;
; }
;
L017E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear(); // clear the sprites
;
	jsr     _oam_clear
;
; oam_meta_spr(0, 0, WhiteBox);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #<(_WhiteBox)
	ldx     #>(_WhiteBox)
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_bg (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_bg: near

.segment	"CODE"

;
; ppu_off();  // screen off
;
	jsr     _ppu_off
;
; oam_clear(); // clear all sprites
;
	jsr     _oam_clear
;
; set_mt_pointer(metatiles);
;
	lda     #<(_metatiles)
	ldx     #>(_metatiles)
	jsr     _set_mt_pointer
;
; set_data_pointer(level);
;
	lda     #<(_level)
	ldx     #>(_level)
	jsr     _set_data_pointer
;
; memcpy(c_map, level, 240);
;
	ldy     #$00
L018E:	lda     _level,y
	sta     _c_map,y
	iny
	cpy     #$F0
	bne     L018E
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L01B5:	sta     _y
;
; for (x = 0;; x += 0x20)
;
	lda     #$00
L01B4:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0)
;
	lda     _x
	cmp     #$E0
;
; break;
;
	beq     L01B6
;
; for (x = 0;; x += 0x20)
;
	lda     #$20
	clc
	adc     _x
	jmp     L01B4
;
; if (y == 0xe0)
;
L01B6:	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L0190
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L01B5
;
; ppu_on_all();
;
L0190:	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);  // load the palette
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp); // load the palette
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; set_vram_buffer();  // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; bank_spr(1); // sprites use the 2nd tileset
;
	lda     #$01
	jsr     _bank_spr
;
; ppu_wait_nmi(); // wait
;
	jsr     _ppu_wait_nmi
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; set_vram_buffer(); // points ppu update to vram_buffer, do this at least once
;
	jsr     _set_vram_buffer
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; while (game_mode == MODE_TITLE) // gameloop
;
	jmp     L01B7
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0152:	jsr     _ppu_wait_nmi
;
; draw_bg();
;
	jsr     _draw_bg
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; while (game_mode == MODE_TITLE) // gameloop
;
L01B7:	lda     _game_mode
	beq     L0152
;
; while (game_mode == MODE_GAME) // gameloop
;
	jmp     L01B8
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L015A:	jsr     _ppu_wait_nmi
;
; read_input_triggers(); // read the input
;
	jsr     _read_input_triggers
;
; if (trigger1_pulled == 1)
;
	lda     _trigger1_pulled
	cmp     #$01
	bne     L0160
;
; read_zapper_hits();
;
	jsr     _read_zapper_hits
;
; draw_sprites();
;
L0160:	jsr     _draw_sprites
;
; gray_line(); // debugging how much processing is used
;
	jsr     _gray_line
;
; while (game_mode == MODE_GAME) // gameloop
;
L01B8:	lda     _game_mode
	cmp     #$01
	beq     L015A
;
; while (1)
;
	jmp     L01B7

.endproc

